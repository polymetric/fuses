FuRegisterClass("DeadPixelFinder", CT_Tool, {
   REGS_Category = "Analysis",
   REGS_OpIconString = "DPF",
   REGS_OpDescription = "",
   REG_OpNoMask = true,
   REG_NoBlendCtrls = true,
   REG_NoObjMatCtrls = true,
   REG_NoMotionBlurCtrls = true,
})

function Create()
	InThreshold = self:AddInput("Threshold", "Threshold", {
		LINKS_Name = "Threshold",
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_Integer = false,
		INP_MaxScale = 1,
		INP_MinScale = 0,
		INP_Default = 0.08,
		ICD_Center = 0,
	})
	
	InputLink = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	
	OutputLink = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
end

function Process(req)
	local input = InputLink:GetValue(req)
	local output = Image({IMG_Like = input, IMG_Depth = 8})
	
	local thresh = InThreshold:GetValue(req).Value
	
	-- prev = 0
	
	output:ProcessPixels(0, 0, input.Width, input.Height, input, function(x, y, p)
		if p.G > .08 then
			-- prev = p.G
			p.G = p.G * 300
			-- p.G = 0
			print(x .. " " .. y * -1 + input.Height - 1 .. " " .. os.time(os.date('*t')))
		end
		
		return p
	end)
	
	OutputLink:Set(req, output)
end
