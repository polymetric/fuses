FuRegisterClass("Log2", CT_Tool, {
   REGS_Category = "Fuses",
   REGS_OpIconString = "2Log",
   REGS_OpDescription = "Log2 encode/decode",
   REG_OpNoMask = true,
   REG_NoBlendCtrls = true,
   REG_NoObjMatCtrls = true,
   REG_NoMotionBlurCtrls = true,
})

function Create()
	InMode = self:AddInput("Mode", "Mode", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ComboControl",
		INP_Default = 0,
		{ CCS_AddString = "Encode", },
		{ CCS_AddString = "Decode", },
		CC_LabelPosition = "Horizontal",	
		ICD_Width = 0.5,
		INP_DoNotifyChanged = true,
	})

	InputLink = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	
	OutputLink = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
end

function Process(req)
	local input = InputLink:GetValue(req)
	local output = Image({IMG_Like = input, IMG_Depth = 8})
	
	local mode = InMode:GetValue(req).Value
	
	output:ProcessPixels(0, 0, input.Width, input.Height, input, function(x, y, p)
		if mode == 0 then
			p.R = encode(p.R)
			p.G = encode(p.G)
			p.B = encode(p.B)
		elseif mode == 1 then
			p.R = decode(p.R)
			p.G = decode(p.G)
			p.B = decode(p.B)
		end
		return p
	end)
	
	OutputLink:Set(req, output)
end

function encode(x)
	return math.log(x, 2)
end

function decode(x)
	return math.max(2 ^ x, 0)
end

function Map(x, in_min, in_max, out_min, out_max)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
end
