FuRegisterClass("PurePowerGamma", CT_Tool, {
   REGS_Category = "Color",
   REGS_OpIconString = "PPG",
   REGS_OpDescription = "Pure Power Gamma",
   REG_OpNoMask = true,
   REG_NoBlendCtrls = true,
   REG_NoObjMatCtrls = true,
   REG_NoMotionBlurCtrls = true,
})

function Create()
	InY = self:AddInput("Gamma", "Gamma", {
		LINKS_Name = "Gamma",
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 10.0,
		INP_Default = 1,
		ICD_Center = 0.0,
	})
	
	InR = self:AddInput("Retain middle gray", "expcomp", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 0.0,
		ICD_Width = 0.25,
		})	
	
	InputLink = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	
	OutputLink = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
end

function Process(req)
	local input = InputLink:GetValue(req)
	local output = Image({IMG_Like = input, IMG_Depth = 8})
	
	local g = InY:GetValue(req).Value
	local ec = .18/f(.18, g) -- exposure compensation
	local r = InR:GetValue(req).Value
	if r == 0 then
		ec = 1
	end
	
	output:ProcessPixels(0, 0, input.Width, input.Height, input, function(x, y, p)
		p.R = f(p.R, g) * ec
		p.G = f(p.G, g) * ec
		p.B = f(p.B, g) * ec
		return p
	end)
	
	OutputLink:Set(req, output)
end

function f(x, y)
	return x ^ y
end
